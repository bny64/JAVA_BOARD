<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
     id="bny" version="3.1" metadata-complete="true">

  <!-- SPRING request 순서 -->
  <!-- FILTER => DISPATCHER => INTERCEPTOR => AOP => CONTROLLER -->
	
  <!-- web.xml은 서블릿 배포 서술자(DD)라고 부른다. Deployment Descriptor -->

	
  <!-- DD파일의 title 정도 -->
  <display-name>tripleProject</display-name>
  
  
  <!-- 어떤 프로젝트를 위한 배포 서술자인지 상세하게 기록한다. -->
  <description>Tutorial of java spring project by NY</description>
    
    
  <!-- context -->
  <!-- STS에서 기본적으로 제공해주는 설정 파일 외에 사용자가 직접 컨트롤하는 XML파일을 지정해주는 역할. <context-param>에서 설정되어 있는 root-context.xml은 모든 서블릿과 필터에서 사용되는 루트 스프링 컨테이너에 대한 설정-->
  <!-- 전역에서 사용할 파라미터 정의 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
   			classpath:spring/root/*-context.xml
			classpath:spring/application/*-context.xml			
			classpath:spring/security/spring-security-context.xml
		</param-value>
  </context-param>
  <!-- context -->
  
  
  <!-- listener --> 
  <!-- 스프링 설정정보를 읽는다. -->
  <!-- 이벤트가 동작할 때 실행되는 클래스. listener는 상속받아서 사용. 정해져 있는 interface, class가 있다. -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <listener>
  	<!-- 한 유저가 다른 브라우저로 동시 로그인하는 것을 막는다. -->
  	<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
  </listener>
  <!-- listener -->  
  
	<!--
  	FILTER단에서 컨트롤할 class
 	init(method) : 서버가 올라갈 때 최초 실행되는 메서드
  	doFilter(method) : request 전, response 후 실행
        	             메서드 내의 chain.doFilter() 전의 로직은 spring container의 dispatcher로 진입하기 전
                	     메서드 내의 chain.doFilter() 후의 로직은 spring container의 dispatcher 후 사용자에게 최종 response 하기 직전의 단계
  	destroy(method) : 서버가 종료될 때 실행되는 메서드
  	-->

  	<!--
  	<filter>
    	<filter-name>사용할 필터명</filter-name>
	<filter-class>사용할 필터 클래스(implements 해서 사용. 사용할 수 있는 클래스는 정해져 있다. ex) implements Filter(javax.servlet.Filter))</filter-class>
		<init-param>
			<param-name>필터 클래스에서 사용할 변수명</param-name>
			<param-value>필터 클래스에서 사용할 변수의 값</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>위에서 정의한 필터명</filter-name>
		<filter-pattern>필터를 사용할 url 패턴</filter-pattern>
	</filter-mapping>
  	-->
	
	
  <!-- filter -->
  <!-- 한글 깨짐 문제를 CharacterEncoding을 사용하여 Encoding 처리한다. -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <!-- url-pattern으로 /*가 지정된 의미는 /이하로 들어오는 모든 request에 해당 filter를 적용하겠다는 의미. -->
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <filter>
  	<filter-name>springSecurityFilterChain</filter-name>
  	<!-- 모든 요청은 이 프록시필터를 거친다. 스프링시큐리티는 이를 통해 인증, 인가를 수행 -->
  	<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>  	
  </filter>
  <filter-mapping>
  	<filter-name>springSecurityFilterChain</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- DispatherServlet 앞단에서 정보 처리 -->
  <!-- 전역적으로 무언가를 처리해야 하는 로직은 필터로 구현(인코딩 및 보안관련 처리). 디테일한 처리는 인터셉터로 구현(인증, 권한) -->
  <filter>
    <filter-name>CommonFilter</filter-name>
    <filter-class>com.web.common.filter.CommonFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>CommonFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
   
  <filter>
    <filter-name>CustomFilter</filter-name>
    <filter-class>com.web.common.filter.CustomFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>CustomFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>   
  <!-- filter  -->
    
  
  <!-- servlet -->
  <!-- spring에서는 DispatcherServlet이 모든 요청을 받고, 요청의 URL과 맵핑하는 Controller에 위임된다. 서블릿(Servlet)이란 보통 자바에서 동적 웹 프로젝트를 개발할 때, 사용자의 요청과 응답을 처리해주는 역할을 한다.  -->
  <servlet>
    <servlet-name>dispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
	      <param-value>
					classpath:spring/servlet/dispatcher-servlet-context.xml
					classpath:spring/application/util-context.xml
		  </param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <url-pattern>*.do</url-pattern>    
  </servlet-mapping>
  
  <!-- servlet-context는 등록된 빈은 다른 컨텍스트와 공유할 수 없다. -->
  <!-- 특정요청에 대해 사용할 servlet -->
  <servlet>
    <servlet-name>staticServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
	      <param-value>classpath:spring/static/static-context.xml</param-value>
    </init-param> 
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
	<servlet-name>staticServlet</servlet-name>
	<url-pattern>/</url-pattern>
  </servlet-mapping>
  
  
  <!-- session 설정. 세션이 유지되는 시간을 설정. 단위는 minute -->
  <session-config>
  	<session-timeout>30</session-timeout>
  </session-config>
  
  
  <!-- error page 설정. 해당하는 에러가 발생 시  이동 url 설정 -->
  <error-page>
  	<error-code>404</error-code>
  	<location>/WEB-INF/error/notFoundPage.jsp</location>
  </error-page>
  
  
  
  <!-- 시작페이지 설정 -->
  <!-- 기존에  welcome-file의 경로를 /WEB-INF/views/index.jsp 이렇게 했음
  	welcome-file을 찾을 때 //WEB-INF/views/index.jsp 이렇게 찾기 때문에 spring-security에서 //(double slash)를 제한하기 때문에 에러 발생.
  	참고로 welcome-file 경로는 webapp 하위 경로임
  	따라서 아래와 같이 설정해야 함.
  	혹은 webapp 밑 하위경로에 넣는 경우 
  	<welcome-file>index.jsp</welcome-file>
  	이런식으로  -->
  <welcome-file-list>
    <welcome-file>WEB-INF/views/index.jsp</welcome-file>
  </welcome-file-list>
   <!-- 시작페이지 설정 -->  
</web-app>
