<?xml version="1.0" encoding="utf-8"?>
<!-- publicId SystemId 에러가 발생할 경우 proxy서버에서 실행했을 가능성 있음. --> 
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:security="http://www.springframework.org/schema/security" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
   http://www.springframework.org/schema/beans 
   https://www.springframework.org/schema/beans/spring-beans.xsd 
   http://www.springframework.org/schema/context  
   https://www.springframework.org/schema/context/spring-context.xsd 
   http://www.springframework.org/schema/tx 
   https://www.springframework.org/schema/tx/spring-tx.xsd 
   http://www.springframework.org/schema/security 
   https://www.springframework.org/schema/security/spring-security.xsd">
	
	<!-- 
		schema는 라이브러리가 없으면 인터넷에서 불러온다.
		라이브러리가 있었으나 문제가 있어서 계속 인터넷에서 schema를 불러오고 있었다. 그래서 인터넷이 연결이 안되면 SSL 에러가 발생했었음.
		이더넷으로 연결된 상태에서 기존에 http://~~ 로 되어 있을 때는 문제가 있었지만 https로 변경하니 문제가 사라짐.
		spring-security-4.2.xsd 버전까지는 http인 것 같다.
	 -->
	
	<!-- secuirty 제외할 url -->
	<security:http pattern="/images/**" security="none" />
	<security:http pattern="/js/**" security="none"/>
	<security:http pattern="/publishing/**" security="none"/>
	<security:http pattern="/style/**" security="none"/>
	<security:http pattern="/lib/**" security="none"/>
	<security:http pattern="/thumb/**" security="none"/>
	
	<!-- custom filter 사용시 아래와 같이 사용 -->
	<!-- <security:custom-filter position="FORM_LOGIN_FILTER" ref="fok.service.security.AuthenticationFilter"/> -->
	
	<!-- expression을 추가해야 hasRole, permitAll 등의 다양한 옵션을 사용할 수 있음. -->
	<!-- use-expressions="true"를 설정하지 않으면 false가 default. 이럴 때는 SpEL을 사용하지 않는다. -->
	<!-- spring security 4.x.x 버전부터 default값이 true로 변경됨. -->	
	<!-- create-session=never 세션생성하지 않도록 설정-->
	<security:http 
		create-session="never"
		auto-config="true" 
		use-expressions="true"
		entry-point-ref="authenticationEntryPoint"
		>
		
		<!-- <security:access-denied-handler error-page=""/> -->
		<!-- <intercept-url pattern="..." access="ROLE_ANONYMOUS" /> -->
		<!-- 해당 pattern의 url은 모두 허용. 나머지는 ROLE_USER 권한을 가진사람만 허용 -->
		<!-- hasRole('role1') 권한(role1)을 가지고 있는 경우 -->
		<!-- hasAnyRole('role1', 'role2') 권한들(role1, role2) 하나라도 가지고 있을 경우 (갯수는 제한없다) -->
		<!-- pemitAll 권한 있든 말든 모두 접근 가능하다. -->
		<!-- denyAll 권한 있든 말든 모두 접근 불가능하다. -->
		<!-- isAnonymous() Anonymous 사용자일 경우 (인증을 하지 않은 사용자) -->
		<!-- isRememberMe() Remember-me 기능으로 로그인한 사용자일 경우  -->
		<!-- isAuthenticated() Anonymous 사용자가 아닐 경우 (인증을 한 사용자) -->
		<!-- isFullyAuthenticated() Anonymous 사용자가 아니고 Remember-me 기능으로 로그인 하지 않은 사용자 일 경우 -->		
		<security:intercept-url pattern="/index.do" access="permitAll"/>
		<security:intercept-url pattern="/auth/*.do" access="permitAll"/>
		<security:intercept-url pattern="/common/**/*.do" access="permitAll"/>
		<security:intercept-url pattern="/board/boardList.do" access="permitAll" method="POST"/>
		<security:intercept-url pattern="/**" access="hasAnyRole('ROLE_BRONZE', 'ROLE_SILVER', 'ROLE_ADMIN')"/>		
		
		
		<!-- 보안설정 -->
		<security:csrf/> 
				
		<!-- <form-login 사용자이름과 비밀번호를 가지고 있는 폼기반 인증방법을 사용한다.> -->		
		<!-- username-parameter : input 태그의 아이디 혹은 이메일 name 속성 값 (default: username) -->
		<!-- password-parameter :  input 태그의 비밀번호 name 속성 값 (default: password) -->
		<!-- login-page : 새로운 로그인 화면 url (default: 스프링 기본 로그인 화면) -->
		<!-- login-processing-url : form 태그의 action 속성 (default: POST /login)-->
		<!-- default-target-url : 로그인 성공시 호출할 url -->
		<!-- authentication-failure-url : 로그인 실패시 호출할 url (default: /login?error=1) -->
		<!-- authentication-failiure-handler-ref 설정시 사용 불가능 한듯 함.--> 
		<!-- authentication-success-handler-ref : 로그인 성공시 default-target-url이 아닌 핸들러로 리다이렉트 -->
		<!-- authentication-failure-handler-ref : 로그인 실패시 authentication-failure-url이 아닌 핸들러로 리다이렉트 -->
		<!-- always-use-default-target : 무조건 핸들러가 지정한 페이지로 이동 (default: false) -->
		<security:form-login login-page="/auth/login.do"			
			login-processing-url="/auth/loginCheck.do"
			username-parameter="email"
			password-parameter="password"						
			authentication-failure-handler-ref="loginFailureHandler"
			authentication-success-handler-ref="loginSuccessHandler"		
		/>

		<security:logout logout-url="/auth/logout.do"
			invalidate-session="true"	
			success-handler-ref="logoutHandler"
		/>
		
		 
		<!-- invalid-session-url : 세션이 끊어졌을 때 이동할 페이지 -->
		<!-- max-sessions : 최대 허용 가능 중복 세션 갯수 -->
		<!-- expired-url : 중복 로그인이 일어났을 경우 이동할 페이지 -->
		<security:session-management invalid-session-url="/auth/login.do">
			<security:concurrency-control max-sessions="1" expired-url="/index.do"/>		
		</security:session-management>
		
		<!-- 권한 없이 접근시 이동할 페이지 -->
		<security:access-denied-handler ref="accessDeinedHandler"/>
		
	</security:http>
	
	<security:global-method-security secured-annotations="enabled" /> 
	
	<security:authentication-manager>		
		<security:authentication-provider ref="userAuthProvider"/>
		<security:authentication-provider user-service-ref="userService"/>
	</security:authentication-manager>
	
	<bean id="loginSuccessHandler" class="com.web.common.security.handler.LoginSuccessHandler">
		<property name="email" value="email"/>
		<property name="defaultSuccessUrl" value="/index.do"/>
	</bean>
	<bean id="loginFailureHandler" class="com.web.common.security.handler.LoginFailureHandler">
		<property name="email" value="email"/>
		<property name="errMsg" value="ERRORMSG"/>
		<property name="defaultFailUrl" value="/auth/login.do"/>
	</bean>		
	<bean id="logoutHandler" class="com.web.common.security.handler.LogoutHandler">
		<constructor-arg value="/index.do"/>		
	</bean>
	
	<!-- 사용자가 인증을 하지 않고 접근하는 경우 -->
	<bean id="authenticationEntryPoint" class="com.web.common.security.CustomAuthenticationEntryPoint"/>	
	
	<!-- 사용하지 않음. 사용자가 권한이 없는 페이지로 이동할 경우 사용. 지금은 url로 직접 이동시킴 -->
	<bean id="accessDeinedHandler" class="com.web.common.security.CustomAccessDeniedHandler"/>	
	
	
	<bean id="userAuthProvider" class="com.web.common.security.CustomAuthenticationProvider"/>
	<bean id="userService" class="com.web.common.security.CustomUserDetailService"/>
	
	<bean id="passwordEncoding" class="com.web.common.security.PasswordEncoding">
		<property name="passwordEncoder" ref="passwordEncoder"/>
	</bean>
	
	<!-- 암호화 클래스 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.password.DelegatingPasswordEncoder">
		<constructor-arg name="idForEncode" value="bcrypt"/>
		<constructor-arg name="idToPasswordEncoder" type="java.util.Map">
			<map>				
				<entry key="bcrypt">
					<bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
				</entry>
			</map>			
		</constructor-arg>		
	</bean>
		
</beans>