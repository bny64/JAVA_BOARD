<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-4.2.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
   http://www.springframework.org/schema/security
   http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- secuirty 제외할 url -->	
	<security:http pattern="/images/**" security="none"/>
	<security:http pattern="/js/**" security="none"/>
	<security:http pattern="/publishing/**" security="none"/>
	<security:http pattern="/style/**" security="none"/>
	<security:http pattern="/lib/**" security="none"/>	
	
	<!-- expression을 추가해야 hasRole, permitAll 등의 다양한 옵션을 사용할 수 있음. -->
	<!-- use-expressions="true"를 설정하지 않으면 false가 default. 이럴 때는 SpEL을 사용하지 않는다. -->
	<!-- <intercept-url pattern="..." access="ROLE_ANONYMOUS" /> -->
	<security:http auto-config="true" use-expressions="true">
		
		<!-- 해당 pattern의 url은 모두 허용. 나머지는 ROLE_USER 권한을 가진사람만 허용 -->
		<!-- hasRole('role1') 권한(role1)을 가지고 있는 경우 -->
		<!-- hasAnyRole('role1', 'role2') 권한들(role1, role2) 하나라도 가지고 있을 경우 (갯수는 제한없다) -->
		<!-- pemitAll 권한 있든 말든 모두 접근 가능하다. -->
		<!-- denyAll 권한 있든 말든 모두 접근 불가능하다. -->
		<!-- isAnonymous() Anonymous 사용자일 경우 (인증을 하지 않은 사용자) -->
		<!-- isRememberMe() Remember-me 기능으로 로그인한 사용자일 경우  -->
		<!-- isAuthenticated() Anonymous 사용자가 아닐 경우 (인증을 한 사용자) -->
		<!-- isFullyAuthenticated() Anonymous 사용자가 아니고 Remember-me 기능으로 로그인 하지 않은 사용자 일 경우 -->
		<security:intercept-url pattern="/index.do" access="permitAll"/>
		<security:intercept-url pattern="/auth/*.do" access="permitAll"/>
		<security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
		
		<!-- 보안설정 -->
		<security:csrf/> 
		
		<!-- <form-login 사용자이름과 비밀번호를 가지고 있는 폼기반 인증방법을 사용한다.> -->		
		<!-- username-parameter : input 태그의 아이디 혹은 이메일 name 속성 값 (default: username) -->
		<!-- password-parameter :  input 태그의 비밀번호 name 속성 값 (default: password) -->
		<!-- login-page : 새로운 로그인 화면 url (default: 스프링 기본 로그인 화면) -->
		<!-- login-processing-url : form 태그의 action 속성 (default: POST /login)-->
		<!-- default-target-url : 로그인 성공시 호출할 url -->
		<!-- authentication-failure-url : 로그인 실패시 호출할 url (default: /login?error=1) -->
		<!-- authentication-success-handler-ref : 로그인 성공시 default-target-url이 아닌 핸들러로 리다이렉트 -->
		<!-- authentication-failure-handler-ref : 로그인 실패시 authentication-failure-url이 아닌 핸들러로 리다이렉트 -->
		<!-- always-use-default-target : 무조건 핸들러가 지정한 페이지로 이동 (default: false) -->
		<security:form-login login-page="/auth/login.do"			
			login-processing-url="/auth/loginCheck.do"
			username-parameter="email"
			password-parameter="password"
			default-target-url="/index.do"
		/>
	</security:http>
	
	<security:global-method-security secured-annotations="enabled"/> 
	
	<security:authentication-manager>		
		<security:authentication-provider ref="userAuthProvider"/>
		<security:authentication-provider user-service-ref="userService">
			
		</security:authentication-provider>
	</security:authentication-manager>
	
	<bean id="userAuthProvider" class="com.web.common.security.CustomAuthenticationProvider"/>
	<bean id="userService" class="com.web.common.security.CustomUserDetailService"/>
	
	<bean id="passwordEncoding" class="com.web.common.security.PasswordEncoding">
		<property name="passwordEncoder" ref="passwordEncoder"/>
	</bean>
	
	<!-- 암호화 클래스 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.password.DelegatingPasswordEncoder">
		<constructor-arg name="idForEncode" value="bcrypt"/>
		<constructor-arg name="idToPasswordEncoder" type="java.util.Map">
			<map>				
				<entry key="bcrypt">
					<bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
				</entry>
			</map>			
		</constructor-arg>		
	</bean>
		
</beans>